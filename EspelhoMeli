import streamlit as st
import pandas as pd
import os
import json
from datetime import datetime, timedelta
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
import altair as alt
import streamlit_authenticator as stauth

st.set_page_config(page_title="Controle de Presen√ßa - Ajudante", layout="centered")

# Estilo escuro e responsivo
st.markdown("""
    <style>
        body, .stApp { background-color: #1e1e1e; color: #f2f2f2; }
        .stButton>button, .stDownloadButton>button {
            background-color: #4CAF50; color: white; border: none; border-radius: 6px;
            padding: 8px 16px; font-size: 16px;
        }
        .stMarkdown h1, .stMarkdown h2, .stMarkdown h3 { color: white; }
    </style>
""", unsafe_allow_html=True)

# Arquivos e constantes
ARQUIVO_EXCEL = "resumo_ajudante.xlsx"
ARQUIVO_PDF = "recibo_ajudante.pdf"
ARQUIVO_AJUDANTES = "ajudantes.json"
VALOR_DIARIA = 50.0

# Login com senhas criptografadas
nomes = ["Rodrigo", "Luana"]
usuarios = ["rodrigo", "luana"]
hashed_pw = [
    "$2b$12$tr3sZ6UJ4EFmvM0QH0IGme5KUg8VcMCur6ggWrKtToMkUue1e1Hba",  # 1234
    "$2b$12$AhPR.DGKfdM6UzI8IRW6m.F/zUV7ZzK3gP1Go9uLRsLyvvqnmVkZ2"   # senha123
]

authenticator = stauth.Authenticate(
    nomes, usuarios, hashed_pw, "app_ajudante_login", "abcdef", cookie_expiry_days=30
)
nome_usuario, autenticado, username = authenticator.login("Login", "main")
if not autenticado:
    st.stop()
# Fun√ß√µes para gerenciar ajudantes
def carregar_ajudantes():
    if os.path.exists(ARQUIVO_AJUDANTES):
        with open(ARQUIVO_AJUDANTES, "r") as f:
            return json.load(f)
    return ["Cleverson"]

def salvar_ajudantes(lista):
    with open(ARQUIVO_AJUDANTES, "w") as f:
        json.dump(lista, f)

# Menu lateral
st.sidebar.title("üìÅ Menu")

# Sele√ß√£o do ajudante
ajudantes = carregar_ajudantes()
ajudante_selecionado = st.sidebar.selectbox("üë§ Ajudante", ajudantes)

# Adicionar novo ajudante
with st.sidebar.expander("‚ûï Adicionar novo ajudante"):
    novo_ajudante = st.text_input("Novo ajudante")
    if st.button("Salvar Ajudante"):
        if novo_ajudante and novo_ajudante not in ajudantes:
            ajudantes.append(novo_ajudante)
            salvar_ajudantes(ajudantes)
            st.success(f"{novo_ajudante} adicionado!")
            st.experimental_rerun()
        elif novo_ajudante in ajudantes:
            st.warning("Ajudante j√° existe.")

# Navega√ß√£o entre p√°ginas
aba = st.sidebar.radio("Navegar para", ["In√≠cio", "Registrar", "Relat√≥rios", "Recibo"])

# Identifica√ß√£o do usu√°rio logado
st.sidebar.markdown(f"üîê Logado como **{nome_usuario}**")
# Fun√ß√µes para carregar e salvar dados
def carregar_dados():
    if os.path.exists(ARQUIVO_EXCEL):
        return pd.read_excel(ARQUIVO_EXCEL, engine="openpyxl")
    return pd.DataFrame(columns=["Usu√°rio", "Ajudante", "Data", "Comparecimento", "Motorista", "Valor (R$)"])

def salvar_dados(df):
    df.to_excel(ARQUIVO_EXCEL, index=False)

# P√°gina: Registrar presen√ßa
if aba == "Registrar":
    st.subheader("üìù Registro de Presen√ßa")

    with st.form("formulario_presenca"):
        col1, col2 = st.columns(2)
        with col1:
            data = st.date_input("Data da presen√ßa", value=datetime.today())
        with col2:
            presente = st.checkbox("Compareceu?", value=True)

        motorista = st.selectbox("Motorista", ["Felipe", "Jonas", "Rodrigo"]) if presente else "-"

        enviado = st.form_submit_button("Salvar registro")

        if enviado:
            df = carregar_dados()
            data_str = data.strftime("%d/%m/%Y")

            # Remove duplicata no mesmo dia
            df = df[~((df["Data"] == data_str) & (df["Ajudante"] == ajudante_selecionado) & (df["Usu√°rio"] == username))]

            novo = pd.DataFrame([{
                "Usu√°rio": username,
                "Ajudante": ajudante_selecionado,
                "Data": data_str,
                "Comparecimento": "Presente" if presente else "Ausente",
                "Motorista": motorista,
                "Valor (R$)": VALOR_DIARIA if presente else 0.0
            }])

            df = pd.concat([df, novo], ignore_index=True).sort_values("Data")
            salvar_dados(df)

            st.success(f"Registro salvo para {data_str}.")
if aba == "Relat√≥rios":
    st.subheader("üìà Relat√≥rios e Gr√°ficos")
    df_dados = carregar_dados()
    df_dados = df_dados[(df_dados["Ajudante"] == ajudante_selecionado) & (df_dados["Usu√°rio"] == username)]

    if df_dados.empty:
        st.warning("Nenhum registro encontrado para este ajudante.")
    else:
        df_dados["Data_ord"] = pd.to_datetime(df_dados["Data"], dayfirst=True)

        st.markdown("#### üîç Filtro por per√≠odo")
        col1, col2 = st.columns(2)
        with col1:
            data_ini = st.date_input("In√≠cio", value=datetime.today().replace(day=1))
        with col2:
            data_fim = st.date_input("Fim", value=datetime.today())

        df_filtrado = df_dados[(df_dados["Data_ord"] >= pd.to_datetime(data_ini)) &
                               (df_dados["Data_ord"] <= pd.to_datetime(data_fim))]

        if df_filtrado.empty:
            st.info("Nenhum dado no intervalo selecionado.")
        else:
            st.markdown(f"**Dias trabalhados:** {df_filtrado[df_filtrado['Comparecimento'] == 'Presente'].shape[0]}")

            with st.expander("üìã Ver dados"):
                st.dataframe(df_filtrado.reset_index(drop=True), use_container_width=True)

            st.markdown("#### üöó Presen√ßas por Motorista")
            pres_motorista = df_filtrado[df_filtrado["Comparecimento"] == "Presente"]["Motorista"].value_counts().reset_index()
            pres_motorista.columns = ["Motorista", "Presen√ßas"]
            st.altair_chart(alt.Chart(pres_motorista).mark_bar().encode(
                x=alt.X("Motorista", sort="-y"),
                y="Presen√ßas",
                tooltip=["Motorista", "Presen√ßas"]
            ).properties(width=500, height=300))

            st.markdown("#### üìÜ Linha do Tempo de Presen√ßa")
            linha = df_filtrado.groupby("Data_ord")["Comparecimento"].apply(lambda x: (x == "Presente").sum()).reset_index(name="Presen√ßas")
            st.altair_chart(alt.Chart(linha).mark_line(point=True).encode(
                x="Data_ord:T",
                y="Presen√ßas"
            ).properties(width=500, height=300))

            st.markdown("#### üçï Presente vs Ausente")
            contagem = df_filtrado["Comparecimento"].value_counts().reset_index()
            contagem.columns = ["Status", "Quantidade"]
            st.pyplot(contagem.set_index("Status").plot.pie(
                y="Quantidade", autopct='%1.1f%%', ylabel="", figsize=(4, 4)).figure)
# Fun√ß√£o para gerar recibo PDF
def gerar_recibo(df, inicio, fim):
    c = canvas.Canvas(ARQUIVO_PDF, pagesize=A4)
    largura, altura = A4
    x, y = 50, altura - 50

    c.setFont("Helvetica-Bold", 14)
    c.drawString(x, y, "RECIBO DE DI√ÅRIAS - AJUDANTE")
    y -= 25
    c.setFont("Helvetica", 12)
    c.drawString(x, y, f"Ajudante: {ajudante_selecionado}")
    y -= 20
    c.drawString(x, y, f"Per√≠odo: {inicio} a {fim}")
    y -= 30

    c.setFont("Helvetica-Bold", 11)
    c.drawString(x, y, "Data")
    c.drawString(x + 100, y, "Motorista")
    c.drawString(x + 220, y, "Valor (R$)")
    y -= 15
    c.setFont("Helvetica", 11)

    total = 0
    for _, row in df.iterrows():
        if y < 100:
            c.showPage()
            y = altura - 50
        c.drawString(x, y, row["Data"])
        c.drawString(x + 100, y, row["Motorista"])
        c.drawString(x + 220, y, f"{row['Valor (R$)']:.2f}".replace('.', ','))
        total += row["Valor (R$)"]
        y -= 15

    y -= 30
    c.setFont("Helvetica-Bold", 12)
    c.drawString(x, y, f"Total de Di√°rias: {df.shape[0]}")
    c.drawString(x + 200, y, f"Total a Receber: R$ {total:.2f}".replace('.', ','))

    y -= 50
    c.setFont("Helvetica", 11)
    c.drawString(x, y, "Assinatura: ___________________________")
    y -= 20
    c.drawString(x, y, f"Data de Emiss√£o: {datetime.today().strftime('%d/%m/%Y')}")
    c.save()
    return ARQUIVO_PDF
# P√°gina: Recibo
if aba == "Recibo":
    st.subheader("üßæ Gerar Recibo")
    df = carregar_dados()
    df = df[(df["Ajudante"] == ajudante_selecionado) & (df["Usu√°rio"] == username)]
    df["Data_ord"] = pd.to_datetime(df["Data"], dayfirst=True)
    df_pres = df[df["Comparecimento"] == "Presente"]

    if df_pres.empty:
        st.info("Nenhum registro de presen√ßa encontrado.")
    else:
        periodo = st.radio("Per√≠odo:", ["√öltimos 15 dias", "M√™s atual", "Personalizado"])
        hoje = datetime.today()
        if periodo == "√öltimos 15 dias":
            ini, fim = hoje - timedelta(days=15), hoje
        elif periodo == "M√™s atual":
            ini, fim = hoje.replace(day=1), hoje
        else:
            col1, col2 = st.columns(2)
            with col1:
                ini = st.date_input("In√≠cio")
            with col2:
                fim = st.date_input("Fim")

        df_filtro = df_pres[(df_pres["Data_ord"] >= pd.to_datetime(ini)) &
                            (df_pres["Data_ord"] <= pd.to_datetime(fim))]

        if df_filtro.empty:
            st.warning("Nenhum dado no intervalo selecionado.")
        else:
            if st.button("üìÑ Gerar Recibo PDF"):
                gerar_recibo(df_filtro, ini.strftime("%d/%m/%Y"), fim.strftime("%d/%m/%Y"))
                with open(ARQUIVO_PDF, "rb") as f:
                    st.download_button("üì• Baixar PDF", f, file_name=ARQUIVO_PDF)

            st.download_button("üì§ Exportar Excel",
                               df_filtro.to_excel(index=False, engine="openpyxl"),
                               file_name="dias_trabalhados.xlsx")

            if st.button("üßπ Iniciar Nova Quinzena"):
                df_antigo = carregar_dados()
                df_novo = df_antigo[~((df_antigo["Ajudante"] == ajudante_selecionado) &
                                      (df_antigo["Usu√°rio"] == username))]
                salvar_dados(df_novo)
                st.success("Presen√ßas deste ajudante foram apagadas com sucesso.")
